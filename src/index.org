#+TITLE: Dataservice
#+Author: VLEAD
#+Date: [2015-08-13 Thu]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: org-templates/level-0.org

* Introduction
  Dataservice is a micro service that allows persistence of data by other micro
  services over HTTP using REST API.  dataservie hides the implementation
  details of the data store that is required for data persistence. s


* Requirements
  1. The model of the data on whose foundation dataservice is built is
     explicitly laid out. <<req1>>
  2. Python API is provided as a wrapper to make CRUD operations on the data.
  3. REST API is provided for various applications to perform CRUD operations
     on the data.
* Design

** Data Model
Description of the data model.

*** Types: List of all the types in the model

   + Lab

     *Immutable Data*
       These are the data associated with Lab type, which are immutable.

       + LabId
       + NoOfExperiments

     *Mutable Data*
       These are the data associated with Lab type, which are mutable.

        + Name
        + Institute
        + Discipline
        + IntegrationLevel
        + HostedURL
        + RepoURL
        + TypeOfLab
        + HostedOn
        + Web2Compliant
        + Phase2Lab
        + Developer
        + Technology
        + Experiment

   + Institute

     *Immutable Data*
       This is the data associated with Institute type, which is immutable.

       + InstituteId

     *Mutable Data*
       These are the data associated with Institute type, which are mutable.

       + PIC
       + IIC

   + Discipline

     *Immutable Data*
       This is the data associated with Discipline type, which is immutable.

       + DisciplineId

     *Mutable Data*
       This is the data associated with Discipline type, which is mutable.

       + DNC

   + Experiment

     *Immutable Data*
       This is the data associated with Experiment type, which is immutable.

       + ExperimentId

     *Mutable Data*
       These are the data associated with Discipline type, which are mutable.

       + ContentURL
       + SimulationURL
       + ContentHostedOn
       + SimulationHostedOn

   + Developer

     *Immutable Data*
       This is the data associated with Developer type, which is immutable.

       + DeveloperId

     *Mutable Data*
       This is the data associated with Developer type, which is mutable.

       + Email

   + Technology

     *Immutable Data*
       This is the data associated with Technology type, which is immutable.

       + TechnologyId

     *Mutable Data*
       These are the data associated with Technoloy type, which are mutable.

       + Version
       + FOSS

   + Platform

     Platform is {IIIT, Badal, AWS, Else}.

   + Version

      Version is an alphanumeric string including '-' and '.'.

   + URL

      URL is a type as defined in RFC 1738.

   + Name

      Name is an alphabetical string.

   + LabId

      Lab Id is a natural number.

   + InstituteId

      Institute Id is a natural number.

   + DisciplineId

      Discipline Id is a natural number.

   + DeveloperId

      Developer Id is a natural number.

   + ExperimentId

      Experiment Id is a natural number.

   + TechnologyId

      Technology Id is a natural number.

   + Email

      Email is a type as defined in RFC 5321, 5322 and 6531.

   + TypeOfLab

      TypeOfLab is {Simulation, Remote Triggered, Simulation and Remote Triggered, Pilot Phase}


*** Functions: List of all possible functions in the model

**** Functions operating on multiple domains

***** getLabs: X --> set[Lab]

      X = Union Of {Institute, Discipline, Developer, Technology}

***** getAllInstitutes: Nil --> set[Institute]

***** getInstitute: X --> Institute

      X = Union Of {Lab, Developer}

***** getDevelopers: X --> set[Developer]

      X = Union Of {Lab, Institute}

***** getAllTechnologies: Nil --> set[Technology]

***** getTechnologies: X --> set[Technology]

      X = Union Of {Lab, Experiment}

***** getAllDisciplines: Nil --> set[Discipline]

***** NOTE: is it necessary? getAllLabs: Nil --> set[Lab]

***** NOTE: is it necessary? getAllDevelopers: Nil --> set[Developer]

***** NOTE: is it necessary? getAllExperiments: Nil --> set[Experiment]

**** Functions that operate on the Lab domain

***** getId: Lab --> LabId

***** getName: Lab --> Name

       This is similar to the =getId= function and all types will have this
       function.

***** getIntegrationLevel: Lab --> Level

***** getHostedURL: Lab --> Nil + URL

       URL: when hosted

       Nil: when not hosted

***** getRepoURL: Lab --> Nil + URL

       URL: when sources are available

       Nil: otherwise

***** getType: Lab --> TypeOfLab

***** getNoOfExperiments: Lab --> Nat

***** getHostedOn: Lab --> Platform + Nil

***** isWeb2Compliant: Lab --> Boolean

***** isPhase2Lab: Lab --> Boolean

***** getDiscipline: Lab --> Discipline

***** getExperiments: Lab --> set[Experiment]

***** setName: Lab, Name --> Void

       NOTE: All types will have a =setName= function.

***** setInstitute: Lab, Institute --> Void

***** setDiscipline: Lab, Discipline --> Void

***** setIntegrationLevel: Lab, Level --> Void

***** setHostedURL: Lab, URL --> Void

***** setRepoURL: Lab, URL --> Void

***** setTypeOfLab: Lab, TypeOfLab --> Void

***** setHostedOn: Lab, Platform --> Void

***** setisWeb2Compliant: Lab, Boolean --> Void

***** setisPhase2: Lab, Boolean --> Void

***** addDeveloper: Lab, Developer --> Void

***** removeDeveloper: Lab, Developer --> Void

***** addTechnology: Lab, Technology --> Void

***** removeTechnology: Lab, Technology --> Void

***** addExperiment: Lab, Experiment --> Void

***** removeExperiment: Lab, Experiment --> Void

**** Functions that operate on Institute domain

***** getId: Institute --> InstituteId

***** getPIC: Institute --> Name

***** getIIC: Institue --> Name

***** setPIC: Institute, Name --> Void

***** setIIC: Institute, Name --> Void

**** Functions that operate on Discipline domain

***** getId: Discipline --> DisciplineId

***** getDNC: Discipline --> Name

***** setDNC: Discipline, Name --> Void

**** Functions that operate on the Experiment domain

***** getId: Experiment --> Experiment Id

***** getContentURL: Experiment --> URL + Nil

***** getSimulationURL: Experiment --> URL + Nil

***** contentHostedOn: Experiment --> Platform + Nil

***** simulationHostedOn: Experiment --> Platform + Nil

***** getLab: Experiment --> Lab

***** setContentURL: Experiment, URL --> Void

***** setSimulationURL: Experiment, URL --> Void

***** setContentHostedOn: Experiment, Platform --> Void

***** setSimulationHostedOn: Experiment, Platform --> Void

**** Functions that operate on the Developer domain

***** getId: Developer --> DeveloperId

***** getEmail: Developer --> Email

***** setEmail: Developer, Email --> Void

**** Functions that operate on the Technology domain

***** getId: Technology --> TechnologyId

***** getVersion: Technology --> Version

***** isFOSS: Technology --> Boolean

***** setVersion: Technology, Version --> Void

***** setFOSS: Technology, Boolean --> Void

*** Relationship between different entities
  #+CAPTION: Entity Diagram
  #+NAME:   entity
  [[https://drive.google.com/open?id%3D0B6LLRcwXMzt8N3RzZGVkb0NpUDA][ER-Diagram]]

* Implementation
* Test Cases
* Design discussions
* Releases
** v0.1.0
    This release will satisfy requirements 1, 2 and 3
*** Work Split
**** Overview
     #+CAPTION: Total Hours
     #+NAME:    total-hours

     |------------------+------------------+--------+--------+--------|
     |                  |                  |        |        | Total  |
     |                  |                  | No. of | No. of | number |
     | Start Date       | End Date         | days   | people | of     |
     |                  |                  |        |        | person |
     |                  |                  |        |        | days   |
     |------------------+------------------+--------+--------+--------|
     | [2015-08-13 Thu] | [2015-08-26 Wed] | 10     | 5      | 50     |
     |------------------+------------------+--------+--------+--------|

**** Detailed
     #+CAPTION: Detailed Hours
     #+NAME:    detailed-hours

     |----------------------+------------------+--------------------+-------------------------+------+------------------|
     | Task Name            |                  | Date of Completion |                         |      |           Effort |
     |                      | Start Date       |                    | no.                     |  no. | (in person days) |
     |                      |                  |                    | of                      |   of |                  |
     |                      |                  |                    | persons                 | days |                  |
     |----------------------+------------------+--------------------+-------------------------+------+------------------|
     | Data Model           | [2015-08-13 Thu] | [2015-08-18 Tue]   | 1                       |    4 |                4 |
     | (Initial Cut)        |                  |                    |                         |      |                  |
     |                      |                  |                    |                         |      |                  |
     |----------------------+------------------+--------------------+-------------------------+------+------------------|
     | Python API           |                  |                    |                         |      |                  |
     | & REST API           | [2015-08-19 Wed] | [2015-08-26 Wed]   | 2                       |    6 |               12 |
     |----------------------+------------------+--------------------+-------------------------+------+------------------|
     | VIEW -               |                  |                    | 4 till [2015-08-18 Tue] |    4 |               16 |
     | list, detail         | [2015-08-13 Thu] | [2015-08-26 Wed]   |                         |      |                  |
     | and update           |                  |                    |                         |      |                  |
     |                      |                  |                    | 2 till [2015-08-26 Wed] |    6 |               12 |
     |----------------------+------------------+--------------------+-------------------------+------+------------------|
     | Provisioning &       |                  |                    |                         |      |                  |
     | Data Model Evolution | [2015-08-19 Wed] | [2015-08-26 Wed]   | 1                       |    6 |                6 |
     |----------------------+------------------+--------------------+-------------------------+------+------------------|
     | Filters              |                  |                    |                         |      |                  |
     |----------------------+------------------+--------------------+-------------------------+------+------------------|

*** Tasks & Deadlines
    1. Data Model
       + Completion Date :: [2015-08-18 Tue]
       + Effort :: 3 person days
       + Tasks
         - Describe each entity and capture the model of data for each entity.
         - Describe the relationship between all the entities.
    2. Python API , REST API and Migration scripts from old data to new model
       + Completion Data :: [2015-08-26 Wed]
       + Effort :: 12 person days
       + Tasks
         - Provide Python API to perform CRUD operations on different entities.
         - Provide REST API for different application to perform CRUD
           operations on different entities.
         - Provide a migration script that converts the legacy data into the
           new data model.
    3. VIEW - list, detail and update views of each entity
       + Completion Data :: [2015-08-26 Wed]
       + Effort :: 12 person days
       + Tasks
         - Provide a mechanism to list all the rows in an entity for all entities.
         - Provide a mechanism to a detailed view of a row in a selected entity.
         - Provide a mechanism to update a row in an entity.

    4. Filters

    5. Provisioning
