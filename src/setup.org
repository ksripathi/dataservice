#+TITLE: Setup Dataservice
#+Author: VLEAD
#+Date: [2015-08-25 Tue]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org

* Introduction

* Install dependendent python packages
Here we use the =setuptools= module from the standard lib, to make a
=setup.py= file, which will install all the python library dependencies.

#+BEGIN_SRC python :tangle setup.py :eval no
from setuptools import setup

requires = [
    'flask',
    'Flask-SQLAlchemy',
    'oursql',
    'flask-cors',
    'flask-testing',
    'requests'
]

setup(
    name='DataService',
    version='0.1',
    install_requires=requires
)

#+END_SRC

* Program to setup the database
We need to create a database and import our schema to it.
The following SQLAlchemy script does that.

Along with that, it also prepopulates some of the data that is fixed and
decided before-hand.

#+BEGIN_SRC python :tangle dbsetup.py :eval no
from src.app import create_app
from src.db import *
import src.config as config


def create_integration_levels():
    int_levels = (0, 1, 2, 3, 4, 5, 6)
    for level in int_levels:
        int_level = IntegrationLevel(level=level)
        int_level.save()


def create_hosting_platforms():
    platforms = ('IIIT', 'BADAL', 'AWS', 'ELSE')
    for plat in platforms:
        platform = HostingPlatform(name=plat)
        platform.save()


def create_type_of_labs():
    types = ('Simulation', 'Remote Triggered',
             'Simulation and Remote Triggered', 'Pilot Phase')
    for type in types:
        lab_type = TypeOfLab(type=type)
        lab_type.save()


def create_institute():
    inst = Institute(name='IIIT Hyderabad',
                     institute_id='IIITH',
                     pic=Name('Venkatesh Chopella'),
                     iic=Name('Raghu Reddy'),
                     pic_email=Email('venkatesh@gmail.com'),
                     iic_email=Email('raghu@gmail.com'))
    inst.save()

    inst = Institute(name='IIT Bombay',
                     institute_id='IITB',
                     pic=Name('Narendra Dhabolkar'),
                     iic=Name('Govind Pansare'),
                     pic_email=Email('dhabolkar@gmail.com'),
                     iic_email=Email('pansare@gmail.com'))

    inst.save()


def create_developer():
    dev = Developer(name=Name('Linus Tarvolds'),
                    email=Email('linus@linux.org'),
                    institute=Institute.get_by_id(1))
    dev.save()

    dev = Developer(name=Name('Claude Shannon'),
                    email=Email('shannon@bell-labs.org'),
                    institute=Institute.get_by_id(2))
    dev.save()


def create_discipline():
    disc = Discipline(name='Computer Science',
                      discipline_id='CSE',
                      dnc=Name('Suresh Purini'),
                      dnc_email=Email('purini@gmail.com'))
    disc.save()

    disc = Discipline(name='Electronics and Communiations Engineering',
                      discipline_id='ECE',
                      dnc=Name('Jayanthi Natarajan'),
                      dnc_email=Email('nataragan@gmail.com'))
    disc.save()


def create_technology():
    tech = Technology(name="Python", version="2.7", foss=True)
    tech.save()
    tech = Technology(name="Apache", version="1.1", foss=True)
    tech.save()
    tech = Technology(name="Mysql", version="3.4", foss=True)
    tech.save()
    tech = Technology(name="Labview", version="4.1", foss=False)
    tech.save()


def create_lab():
    lab = Lab(name='Data Structures',
              lab_id='CSE02',
              institute=Institute.get_by_id(1),
              discipline=Discipline.get_by_id(1),
              integration_level=IntegrationLevel.get_by_id(6),
              developers=[Developer.get_by_id(1)],
              technologies=[Technology.get_by_id(1),
                            Technology.get_by_id(2)],
              repo_url=URL('http://github.com'),
              hosted_url=URL('http://gnu.org'),
              hosted_on=HostingPlatform.get_by_id(1),
              type_of_lab=TypeOfLab.get_by_id(1),
              remarks='First Entry',
              status='Not Deployed',
              is_web_2_compliant_lab=True,
              is_phase_2_lab=True)
    lab.save()
    lab = Lab(name='Radar and Satellite Communication',
              lab_id='ECE05',
              institute=Institute.get_by_id(2),
              discipline=Discipline.get_by_id(2),
              integration_level=IntegrationLevel.get_by_id(5),
              developers=[Developer.get_by_id(2)],
              technologies=[Technology.get_by_id(2),
                            Technology.get_by_id(3)],
              repo_url=URL('http://github.com'),
              hosted_url=URL('http://gnu.org'),
              hosted_on=HostingPlatform.get_by_id(4),
              type_of_lab=TypeOfLab.get_by_id(2),
              remarks='First Entry',
              status='Not Deployed',
              is_web_2_compliant_lab=True,
              is_phase_2_lab=True)
    lab.save()


def create_experiment():
    exp = Experiment(name='Binary Tree',
                     lab=Lab.get_by_id(1),
                     content_url=URL("http://vlabs.ac.in"),
                     content_hosted_on=HostingPlatform.get_by_id(1),
                     simulation_url=URL("http://vlabs.ac.in"),
                     simulation_hosted_on=HostingPlatform.get_by_id(2),
                     technologies=[Technology.get_by_id(1),
                                   Technology.get_by_id(2)])
    exp.save()
    exp = Experiment(name='Doppler Effect',
                     lab=Lab.get_by_id(2),
                     content_url=URL("http://vlabs.ac.org"),
                     content_hosted_on=HostingPlatform.get_by_id(2),
                     simulation_url=URL("http://vlabs.ac.org"),
                     simulation_hosted_on=HostingPlatform.get_by_id(3),
                     technologies=[Technology.get_by_id(2),
                                   Technology.get_by_id(4)])
    exp.save()


def insert_data():
    create_integration_levels()
    create_hosting_platforms()
    create_type_of_labs()
    create_institute()
    create_developer()
    create_discipline()
    create_technology()
    create_lab()
    create_experiment()

if __name__ == "__main__":
    db.create_all(app=create_app(config))
    create_integration_levels()
    create_hosting_platforms()
    create_type_of_labs()
    #create_institute()
    #create_developer()
    #create_discipline()
    #create_technology()
    #create_lab()
    #create_experiment()

#+END_SRC

* Install all dependencies and setup the software
Install all dependencies, including the OS related packages, Python packages,
setup the database, configure the webserver, and finally deploy the
application.

#+BEGIN_SRC sh :tangle setup.sh :eval no
#!/bin/bash
# Shell script to install deb package dependencies as well as python package
# dependencies for dataservice.

# if any proxy server
#PROXY=""
# file to store the generated password
DB_PASS_FILE="db_pass.txt"

if [[ `id -u` -ne 0 ]]; then
  echo "You have to execute this script as super user!"
  exit 1;
fi

# Update the packages
echo "Updating package cache.."
apt-get -y update
if [[ $? -ne 0 ]]; then
  echo "Updating package cache failed!"
  exit 1;
fi

echo "Installing MySQL database.."
if [ ! -f $DB_PASS_FILE ]; then
  # generate a random password for the database and store it in the $DB_PASS_FILE
  # file
  DBPASS=$(date +%s | sha256sum | head -c 32)
  echo $DBPASS > $DB_PASS_FILE
fi

# Install MySQL Server in a Non-Interactive mode.
echo "mysql-server mysql-server/root_password password $DBPASS" | sudo debconf-set-selections
echo "mysql-server mysql-server/root_password_again password $DBPASS" | sudo debconf-set-selections
apt-get install -y mysql-server
if [[ $? -ne 0 ]]; then
  echo "FATAL: MySQL installation failed!"
  exit 1;
fi

# Install pre-requsite dependencies: python-dev, mysqld-dev, setuptools,
# apache, mod_wsgi etc.
echo "Installing pre-requisite dependencies.."
apt-get install -y python-dev libmysqld-dev python-setuptools apache2 libapache2-mod-wsgi
if [[ $? -ne 0 ]]; then
  echo "FATAL: Installing pre-requisite dependencies failed!"
  exit 1;
fi

echo "Enabling the mod WSGI on apache"
a2enmod wsgi
if [[ $? -ne 0 ]]; then
  echo "FATAL: Unable to enable mod wsgi!"
  exit 1;
fi

# Installing python dependencies
echo "Installing dependencies.."
#export http_proxy=$PROXY
#export https_proxy=$PROXY
#python setup.py install
pip install Flask Flask-SQLAlchemy oursql requests flask-cors flask-testing
if [[ $? -ne 0 ]]; then
  echo "FATAL: Installation failed!"
  exit 1;
fi

exit 0

#+END_SRC

* Configuring the application and its deployment
  The following program configures the application, configures the web server
  to use WSGI and use the application scripts, and finally calls the database
  setup scripts to actually setup the database with tables.
#+BEGIN_SRC sh :tangle configure.sh :eval no
#!/bin/bash
# Configure the application in the deployment environment
# 1. Update the config.py file with appropriate values
# 2. Update the apache config to server via WSGI
# 3. Run the database setup scripts to setup the database

if [[ `id -u` -ne 0 ]]; then
  echo "You have to execute this script as super user!"
  exit 1;
fi

update_app_config () {
  CONFIG_FILE="src/config.py"
  DB_USER="root"
  DB_PASS=$(cat db_pass.txt)
  DB_NAME="dataservice"
  DB_SERVER="localhost"

  # the list of white-listed IPs for POST/PUT requests to data service
  WHITELIST_IPS="['127.0.0.1']"

  # the list of allowed domains for CORS
  ALLOWED_ORIGINS="['*.vlabs.ac.in', '*.virtual-labs.ac.in']"

  echo "Updating config.py.."
  # Update parts of the DB URI
  sed -i "s/<userid>/$DB_USER/" $CONFIG_FILE
  sed -i "s/<password>/$DB_PASS/" $CONFIG_FILE
  sed -i "s/<servername>/$DB_SERVER/" $CONFIG_FILE
  sed -i "s/<db_name>/$DB_NAME/" $CONFIG_FILE
  # update SQLALCHEMY_ECHO
  sed -i "s/^SQLALCHEMY_ECHO.*$/SQLALCHEMY_ECHO = False/" $CONFIG_FILE
  # update WHITELIST_IPS
  #sed -i "s/^WHITELIST_IPS.*$/WHITELIST_IPS = $WHITELIST_IPS/" $CONFIG_FILE
  # update ALLOWED_ORIGINS
  #sed -i "s/^ALLOWED_ORIGINS.*$/ALLOWED_ORIGINS = $ALLOWED_ORIGINS/" $CONFIG_FILE

  mkdir logs
  chmod -R a+w logs
}

update_apache_config() {
  PROC_NAME="dataservice"
  WSGI_SCRIPT="dataservice.wsgi"
  APACHE_VHOST_FILE="/etc/apache2/sites-available/default"
  ABS_PATH_DS=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

  sed -i "/<\/VirtualHost>/i \
    WSGIScriptAlias / $ABS_PATH_DS/$WSGI_SCRIPT
  " $APACHE_VHOST_FILE

  #sed -i '/<\/VirtualHost>/i \
  #  WSGIDaemonProcess $PROC_NAME user=www-data group=www-data threads=5
  #  WSGIScriptAlias / $ABS_PATH_DS/$WSGI_SCRIPT

  #  <Directory $ABS_PATH_DS>
  #    WSGIProcessGroup $PROC_NAME
  #    WSGIApplicationGroup %{GLOBAL}
  #    Order deny,allow
  #    Allow from all
  #  </Directory>
  #' $APACHE_VHOST_FILE

}

setup_db() {
  echo "Creating database: $DB_NAME"
  mysql -u $DB_USER -p$DB_PASS -Bse "create database $DB_NAME;"
  if [[ $? -ne 0 ]]; then
    echo "Failed to create database $DB_NAME"
    exit 1;
  fi
  python $ABS_PATH_DS/dbsetup.py
  if [[ $? -ne 0 ]]; then
    echo "Failed to create tables in database $DB_NAME"
    exit 1;
  fi
}

update_app_config
if [[ $? -ne 0 ]]; then
  echo "FATAL: Failed to update application config.py"
  exit 1;
fi
update_apache_config
if [[ $? -ne 0 ]]; then
  echo "FATAL: Failed to update apache config"
  exit 1;
fi

service apache2 restart

setup_db
exit 0;
#+END_SRC

* Run Test Cases
#+BEGIN_SRC sh :tangle run_tests.sh :eval no
#!/bin/bash
# Run the tests
python -m tests.test_db
python -m tests.test_api

#+END_SRC
