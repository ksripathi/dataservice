#+TITLE: Setup Dataservice
#+Author: VLEAD
#+Date: [2015-08-25 Tue]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: org-templates/level-1.org

* Introduction

* Set up the environment
  Environment for running dataservice is set up.
** Set up python dependencies 
#+BEGIN_SRC python :tangle setup.py :eval=no
from setuptools import setup

requires = [
    'flask',
    'Flask-SQLAlchemy',
    'oursql',
    'flask-cors',
    'flask-testing',
    'requests'
]

setup(
    name='DataService',
    version='0.1',
    install_requires=requires
)

#+END_SRC
** set up DB
#+BEGIN_SRC python :tangle dbsetup.py :eval=no
from src.app import create_app
from src.db import *
import src.config as config


def create_integration_levels():
    int_levels = (0, 1, 2, 3, 4, 5, 6)
    for level in int_levels:
        int_level = IntegrationLevel(level=level)
        int_level.save()


def create_hosting_platforms():
    platforms = ('IIIT', 'BADAL', 'AWS', 'ELSE')
    for plat in platforms:
        platform = HostingPlatform(name=plat)
        platform.save()


def create_type_of_labs():
    types = ('Simulation', 'Remote Triggered',
             'Simulation and Remote Triggered', 'Pilot Phase')
    for type in types:
        lab_type = TypeOfLab(type=type)
        lab_type.save()


def create_institute():
    inst = Institute(name='IIIT Hyderabad',
                     institute_id='IIITH',
                     pic=Name('Venkatesh Chopella'),
                     iic=Name('Raghu Reddy'))
    inst.save()

    inst = Institute(name='IIT Bombay',
                     institute_id='IITB',
                     pic=Name('Narendra Dhabolkar'),
                     iic=Name('Govind Pansare'))
    inst.save()


def create_developer():
    dev = Developer(name=Name('Linus Tarvolds'),
                    email_id=Email('linus@linux.org'),
                    institute=Institute.get_by_id(1))
    dev.save()

    dev = Developer(name=Name('Claude Shannon'),
                    email_id=Email('shannon@bell-labs.org'),
                    institute=Institute.get_by_id(2))
    dev.save()


def create_discipline():
    disc = Discipline(name='Computer Science',
                      discipline_id='CSE',
                      dnc=Name('Suresh Purini'))
    disc.save()

    disc = Discipline(name='Electronics and Communiations Engineering',
                      discipline_id='ECE',
                      dnc=Name('Jayanthi Natarajan'))
    disc.save()


def create_technology():
    tech = Technology(name="Python", version="2.7", foss=True)
    tech.save()
    tech = Technology(name="Apache", version="1.1", foss=True)
    tech.save()
    tech = Technology(name="Mysql", version="3.4", foss=True)
    tech.save()
    tech = Technology(name="Labview", version="4.1", foss=False)
    tech.save()


def create_lab():
    lab = Lab(name='Data Structures',
              lab_id='CSE02',
              institute=Institute.get_by_id(1),
              discipline=Discipline.get_by_id(1),
              integration_level=IntegrationLevel.get_by_id(6),
              developers=[Developer.get_by_id(1)],
              technologies=[Technology.get_by_id(1),
                            Technology.get_by_id(2)],
              repo_url=URL('http://github.com'),
              hosted_url=URL('http://gnu.org'),
              hosted_on=HostingPlatform.get_by_id(1),
              type_of_lab=TypeOfLab.get_by_id(1),
              remarks='First Entry',
              status='Not Deployed',
              is_web_2_compliant_lab=True,
              is_phase_2_lab=True)
    lab.save()
    lab = Lab(name='Radar and Satellite Communication',
              lab_id='ECE05',
              institute=Institute.get_by_id(2),
              discipline=Discipline.get_by_id(2),
              integration_level=IntegrationLevel.get_by_id(5),
              developers=[Developer.get_by_id(2)],
              technologies=[Technology.get_by_id(2),
                            Technology.get_by_id(3)],
              repo_url=URL('http://github.com'),
              hosted_url=URL('http://gnu.org'),
              hosted_on=HostingPlatform.get_by_id(4),
              type_of_lab=TypeOfLab.get_by_id(2),
              remarks='First Entry',
              status='Not Deployed',
              is_web_2_compliant_lab=True,
              is_phase_2_lab=True)
    lab.save()


def create_experiment():
    exp = Experiment(name='Binary Tree',
                     lab=Lab.get_by_id(1),
                     content_url=URL("http://vlabs.ac.in"),
                     content_hosted_on=HostingPlatform.get_by_id(1),
                     simulation_url=URL("http://vlabs.ac.in"),
                     simulation_hosted_on=HostingPlatform.get_by_id(2),
                     technologies=[Technology.get_by_id(1),
                                   Technology.get_by_id(2)])
    exp.save()
    exp = Experiment(name='Doppler Effect',
                     lab=Lab.get_by_id(2),
                     content_url=URL("http://vlabs.ac.org"),
                     content_hosted_on=HostingPlatform.get_by_id(2),
                     simulation_url=URL("http://vlabs.ac.org"),
                     simulation_hosted_on=HostingPlatform.get_by_id(3),
                     technologies=[Technology.get_by_id(2),
                                   Technology.get_by_id(4)])
    exp.save()


if __name__ == "__main__":
    db.create_all(app=create_app(config))
    create_integration_levels()
    create_hosting_platforms()
    create_type_of_labs()
    create_institute()
    create_developer()
    create_discipline()
    create_technology()
    create_lab()
    create_experiment()

#+END_SRC
** Set up both DB and Python dependencies
#+BEGIN_SRC sh :tangle setup.sh :eval=no
#!/bin/bash
# Shell script to install deb package dependencies as well as python package
# dependencies for dataservice.

if [[ `id -u` -ne 0 ]]; then
  echo "You have to execute this script as super user!"
  exit 1;
fi
# Update the packages
echo "Installing pre-requisite dependencies.."
apt-get update
apt-get install mysql-server python-dev libmysqld-dev
echo "Installing dependencies.."
# Installing dependencies
python setup.py install
if [[ $? -ne 0 ]]; then
  echo "Installation failed!"
  exit 1;
fi
exit 0

#+END_SRC

* Run Test Cases
#+BEGIN_SRC sh :tangle run_tests.sh :eval=no
#!/bin/bash
# Run the tests
python -m tests.test_db
# python -m tests.test_api

#+END_SRC
