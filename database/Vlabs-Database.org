#+OPTIONS: ^:nil
* *Introduction* 
This report comprises of the information regarding database of 182 virtual labs. It contains the following information:
lab id, institutes name, developer name, discipline, repo url, lab sources availability, hosted url, lab deployed, number of experiments, content, simulation, server side dependencies, client side dependencies, web2.0 compliance, FOSS, type of lab, autohostable, status, integration levels.

* *Tables used in database*
1) labs
2) disciplines
3) developers
4) developers_engaged
5) institutes
6) technologies
7) technologies_used

[[file:./database-documentation.jpg]]

*In table labs following are the foreign keys:*
1) institute_id references from table institutes column id. 
2) discipline_id references from table disciplines column id.
3) developer references from table developers column email_id.

*In table technologies_used following are the foreign keys:*
1) lab_id references from table labs column id. 
2) tech_id references from table technologies column id.

*In table developers_engaged following are the foreign keys:*
1) lab_id references from table labs column id. 
2) developer_id references from table developers column email_id.

* *Code for populating database*
All the tables were populated using MYSql Workbench except developers engaged table and two columns in labs table. They were populated using sqlalchemy.
** Code for populating the data of developers_engaged table
#+BEGIN_SRC emacs-py
from flask import Flask
from flask.ext.sqlalchemy import SQLAlchemy
import csv


db = SQLAlchemy()


# each class correspons to each table

class Lab(db.Model):
    __tablename__ = 'labs'

    id = db.Column(db.Integer, primary_key=True)
    lab_id = db.Column(db.String(45))
    institute_name = db.Column(db.String(45),
                               db.ForeignKey('institutes.institute_name'))

    lab_name = db.Column(db.String(100))
    discipline_name = db.Column(db.String(100),
                                db.ForeignKey('disciplines.discipline_name'))

    developer = db.Column(db.String(100), db.ForeignKey('developers.email'))
    repo_url = db.Column(db.String(200))
    sources_available = db.Column(db.String(45))
    hosted_url = db.Column(db.String(200))
    lab_deployed = db.Column(db.String(45))
    number_of_experiments = db.Column(db.Integer)
    content = db.Column(db.String(45))
    simulation = db.Column(db.String(45))
    web_2_compliance = db.Column('web2.0_compliance', db.String(45))
    type_of_lab = db.Column(db.String(45))
    auto_hostable = db.Column(db.String(45))
    remarks = db.Column(db.String(200))
    integration_level = db.Column(db.Integer)
    status = db.Column(db.String(45))

class Institute(db.Model):
    __tablenames__ = 'institutes'

    id = db.Column(db.Integer)
    institute_name = db.Column(db.String(45), primary_key=True)
    institute_coordinators = db.Column(db.String(100))


class Discipline(db.Model):
    __tablename__ = 'disciplines'

    id = db.Column(db.Integer)
    discipline_name = db.Column(db.String(100), primary_key=True)
    dnc = db.Column(db.String(50))


class Developer(db.Model):
    __tablename__ = 'developers'

    email_id = db.Column(db.String(100), primary_key=True)
    developer_name = db.Column(db.String(100))
    institute_name = db.Column(db.String(45))


class DevelopersEngaged(db.Model):
    __tablename__ = 'developers_engaged'

    id = db.Column(db.Integer, primary_key=True)
    lab_id = db.Column(db.Integer, db.ForeignKey('labs.id'))
    developer_id = db.Column(db.String(100), db.ForeignKey('developers.email_id'))
   

# entry point
def run(**kwargs):
    filename = kwargs.get('csv_file')

    # open the file
    with open(filename, 'rb') as f:
        # parse it with csv module
        reader = csv.reader(f)

        # skip the first row - it contains field names
        reader.next()

        # iterate over all the rows in csv and process it
        for row in reader:
            process_row(row)


# process the passed row from csv file and extract lab_id and
# developers info from the row
def process_row(row):
    # col numbers for specific field in the csv file
    lab_id_col = 0
    developer_id_col = 4
   
    # if Lab_id exists..
    if row[lab_id_col]:
        # fetch the lab from the database based on its lab_id
        lab = Lab.query.filter_by(lab_id=row[lab_id_col]).first()

        # if lab does not exist in the database
        if not lab:
            print 'ERROR: ' + row[lab_id_col] + ' not in database!!!'
            print 'skipping lab ' + row[lab_id_col]
            raw_input('press any key to continue..')
            return

        # else
        print 'for lab'
        print lab.lab_id

        # get all developers engaged in that lab (and split by comma)
        developers = row[developer_id_col].split(',')
       
        # if there are deveopers in that lab
        if len(developers):
            for developer in developers:
                create_developer_engaged_entry(lab, developer)


# create the specific row in the `developers_engaged` table
def create_developer_engaged_entry(lab, developer):
    
    # remove extra leading and trailing whitespace if any
    developer = developer.strip()

    # get the developer_id from the database matching its email_id
    print developer
    developer_in_db = Developer.query.filter_by(email_id=developer).first()

    # developer doesn't exist in db!
    if not developer_in_db:
        print 'developer "' + developer + '" not in database!!'
        raw_input('press any key to continue..')
        return

    # create the new object
    dev_engaged = DevelopersEngaged(lab_id=lab.id,
                                 developer_id=developer_in_db.email_id)   
                                 
    # finally, commit it in the database
    db.session.add(dev_engaged)
    db.session.commit()


if __name__ == '__main__':

    app = Flask(__name__)
    app.config['SQLALCHEMY_DATABASE_URI'] =\
        'mysql+oursql://root:root@localhost/vlabs_info'
    db.init_app(app)
    db.app = app

    run(csv_file='list_of_versioned_labs.csv')
#+END_SRC

** Code for populating the column institute_id_in_labs 

#+BEGIN_SRC emacs
from flask import Flask
from flask.ext.sqlalchemy import SQLAlchemy
import csv


db = SQLAlchemy()


# each class correspons to each table

    
class Institute(db.Model):
    __tablename__ = 'institutes'

    id = db.Column(db.Integer, primary_key=True)
    institute_name = db.Column(db.String(45))
    institute_coordinators = db.Column(db.String(100))


class Discipline(db.Model):
    __tablename__ = 'disciplines'

    id = db.Column(db.Integer)
    discipline_name = db.Column(db.String(100), primary_key=True)
    dnc = db.Column(db.String(50))


class Developer(db.Model):
    __tablename__ = 'developers'

    email_id = db.Column(db.String(100), primary_key=True)
    developer_name = db.Column(db.String(100))
    institute_name = db.Column(db.String(45))


class Lab(db.Model):
    __tablename__ = 'labs'

    id = db.Column(db.Integer, primary_key=True)
    lab_id = db.Column(db.String(45))
    institute_name = db.Column(db.String(45))

    lab_name = db.Column(db.String(100))
    discipline_name = db.Column(db.String(100),
                                db.ForeignKey('disciplines.discipline_name'))

    developer = db.Column(db.String(100), db.ForeignKey('developers.email_id'))
    repo_url = db.Column(db.String(200))
    sources_available = db.Column(db.String(45))
    hosted_url = db.Column(db.String(200))
    lab_deployed = db.Column(db.String(45))
    number_of_experiments = db.Column(db.Integer)
    content = db.Column(db.String(45))
    simulation = db.Column(db.String(45))
    web_2_compliance = db.Column('web2.0_compliance', db.String(45))
    type_of_lab = db.Column(db.String(45))
    auto_hostable = db.Column(db.String(45))
    remarks = db.Column(db.String(200))
    integration_level = db.Column(db.Integer)
    status = db.Column(db.String(45))
    institute_id = db.Column(db.Integer,
                               db.ForeignKey('institutes.id'))

# entry point
def run():
    labs = Lab.query.all()    
    for lab in labs:
        instt_name = lab.institute_name
        instt = Institute.query.filter_by(institute_name=instt_name).first()
	#print instt.id, instt.institute_name
        lab.institute_id = instt.id
        # finally, commit it in the database
        db.session.add(lab)
        db.session.commit()


if __name__ == '__main__':

    app = Flask(__name__)
    app.config['SQLALCHEMY_DATABASE_URI'] =\
        'mysql+oursql://root:root@localhost/vlabs_info'
    db.init_app(app)
    db.app = app

    run()
 #+END_SRC

** Code for populating the column disc_id in labs.
#+BEGIN_SRC emacs
from flask import Flask
from flask.ext.sqlalchemy import SQLAlchemy
import csv


db = SQLAlchemy()


# each class correspons to each table

    
class Institute(db.Model):
    __tablename__ = 'institutes'

    id = db.Column(db.Integer, primary_key=True)
    institute_name = db.Column(db.String(45))
    institute_coordinators = db.Column(db.String(100))


class Discipline(db.Model):
    __tablename__ = 'disciplines'

    id = db.Column(db.Integer)
    discipline_name = db.Column(db.String(100), primary_key=True)
    dnc = db.Column(db.String(50))


class Developer(db.Model):
    __tablename__ = 'developers'

    email_id = db.Column(db.String(100), primary_key=True)
    developer_name = db.Column(db.String(100))
    institute_name = db.Column(db.String(45))


class Lab(db.Model):
    __tablename__ = 'labs'

    id = db.Column(db.Integer, primary_key=True)
    lab_id = db.Column(db.String(45))
    lab_name = db.Column(db.String(100))
    discipline_name = db.Column(db.String(100))

    developer = db.Column(db.String(100), db.ForeignKey('developers.email_id'))
    repo_url = db.Column(db.String(200))
    sources_available = db.Column(db.String(45))
    hosted_url = db.Column(db.String(200))
    lab_deployed = db.Column(db.String(45))
    number_of_experiments = db.Column(db.Integer)
    content = db.Column(db.String(45))
    simulation = db.Column(db.String(45))
    web_2_compliance = db.Column('web2.0_compliance', db.String(45))
    type_of_lab = db.Column(db.String(45))
    auto_hostable = db.Column(db.String(45))
    remarks = db.Column(db.String(200))
    integration_level = db.Column(db.Integer)
    status = db.Column(db.String(45))
    institute_id = db.Column(db.Integer, db.ForeignKey('institutes.id'))
    discipline_id = db.Column(db.Integer, db.ForeignKey('disciplines.id'))

# entry point
def run():
    labs = Lab.query.all()    
    for lab in labs:
        disc_name = lab.discipline_name
        discipline = Discipline.query.filter_by(discipline_name=disc_name).first()
	lab.discipline_id = discipline.id
        # finally, commit it in the database
        db.session.add(lab)
        db.session.commit()


if __name__ == '__main__':

    app = Flask(__name__)
    app.config['SQLALCHEMY_DATABASE_URI'] =\
        'mysql+oursql://root:root@localhost/vlabs_info'
    db.init_app(app)
    db.app = app

    run()
 #+END_SRC

* *Creation of dump file as a backup of the database*
#+BEGIN_SRC emacs 
mysqldump -u username -p dbname > backupfile.sql 
  #+END_SRC
* *Extraction of database from dump file*
#+BEGIN_SRC emacs
mysql -u username -p dbname < backupfile.sql
 #+END_SRC 
*Note* dbname must exist in your mysql.
* *Phpmyadmin Installation on ubuntu*

Before installing phpMyAdmin you will need access to a MySQL database either on the same host as that phpMyAdmin is installed on, or on a host accessible over the network. From a terminal prompt enter:
#+BEGIN_SRC emacs
  sudo apt-get install phpmyadmin
       #+END_SRC

At the prompt choose which web server to be configured for phpMyAdmin. The rest of this section will use Apache2 for the web server.

In a browser go to http://servername/phpmyadmin, replacing serveranme with the server's actual hostname. At the login, page enter root for the username, or another MySQL user if you any setup, and enter the MySQL user's password.

Once logged in you can reset the root password if needed, create users, create/destroy databases and tables, etc.
Configuration

The configuration files for phpMyAdmin are located in /etc/phpmyadmin. The main configuration file is /etc/phpmyadmin/config.inc.php. This file contains configuration options that apply globally to phpMyAdmin.

To use phpMyAdmin to administer a MySQL database hosted on another server, adjust the following in /etc/phpmyadmin/config.inc.php:

#+BEGIN_SRC emacs
  $cfg['Servers'][$i]['host'] = 'db_server';
      #+END_SRC

Replace db_server with the actual remote database server name or IP address. Also, be sure that the phpMyAdmin host has permissions to access the remote database.

Once configured, log out of phpMyAdmin and back in, and you should be accessing the new server.

The config.header.inc.php and config.footer.inc.php files are used to add a HTML header and footer to phpMyAdmin.

Another important configuration file is /etc/phpmyadmin/apache.conf, this file is symlinked to /etc/apache2/conf.d/phpmyadmin.conf, and is used to configure Apache2 to serve the phpMyAdmin site. The file contains directives for loading PHP, directory permissions, etc. For more information on configuring Apache2 see the section called "HTTPD - Apache2 Web Server".

* *Access to database*
Go to your browser, type ipaddress "10.4.14.225/phpmyadmin". It displays the login page of phpmyadmin.

Enter username as "guest" and Go (No Password for guest account). Then it will display the homepage.

Select vlabs_database from databases list and click on "sql" tab. 

You can type query as you want to retrieve data from database or you can run bookmarked queries from the bottom of page.
