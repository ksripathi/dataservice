#+TITLE:     get-service.org
#+AUTHOR:    madhavi
#+EMAIL:     madhavi@vlabs.ac.in
#+DATE:      2014-11-26 Wed

#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc

#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+PROPERTY: session *scratch*
#+PROPERTY: results output
#+PROPERTY: tangle api.py
#+PROPERTY: exports code


At the top of the program, we import various Tornado libraries. There are other helpful
libraries included with Tornado, but you’ll need to import at least these four to get this
program running:
#+begin_src python
import tornado.httpserver
import tornado.ioloop
import tornado.options
import tornado.web
#+end_src
BSON is the binary encoding of JSON-like documents that MongoDB uses when storing documents in collections.
It adds support for data types like Date, binary and objectid that aren't supported in JSON.

#+begin_src python
from bson.objectid import ObjectId
#+end_src

This is a Tornado request handler class. When handling a request, Tornado instantiates
this class and calls the method corresponding to the HTTP method of the request. In
this example, we’ve defined only a get method, meaning that this handler will respond
only to HTTP GET requests. Here, we need to pass object id of a lab to see
the details of that lab.

#+begin_src python
class LabIdHandler(tornado.web.RequestHandler):
def get(self, unique_id):
coll = Lab._get_collection()
sub_coll = coll.find_one({"_id":ObjectId(unique_id)})
if sub_coll:
sub_coll["_id"] = str(sub_coll["_id"])
self.write(sub_coll)
else:
self.set_status(404)
self.write({"error": "word not found"})
#+end_src

In DisciplineHandler we need to pass discipline name such as =cse= then it will 
display all the labs corresponding to this particular discipline.

#+begin_src python
class DisciplineHandler(tornado.web.RequestHandler):
def get(self, disciplinename):
sub_coll = Lab.objects(discipline_name = disciplinename).to_json()
if sub_coll:
self.write(sub_coll)
else:
self.set_status(404)
self.write({"error": "word not found"})
#+end_src

Tornado uses the regular expression in the tuples to match the path of the HTTP re-
quest. (The path is the portion of the URL that follows the hostname, excluding the
query string and fragment.) Tornado treats these regular expressions as though they
contain beginning-of-line and end-of-line anchors (i.e., the string "/" is assumed to
mean "^/$").

When a regular expression has a capture group in it (i.e., a portion of the regular ex-
pression is enclosed in parentheses), the matching contents of that group will be passed
to the RequestHandler object as parameters to the method corresponding to the HTTP
request.

#+begin_src python
def make_app():
return tornado.web.Application([
tornado.web.url(r'/labs', LabHandler),
tornado.web.url(r'/labs/([0-9a-z]*)', LabIdHandler),
tornado.web.url(r'/labs/disciplines/([a-z]*)', DisciplineHandler),
])
#+end_src
These are the lines that actually make the Tornado application run.
Then we create an instance of Tornado’s Application class 
=make_app()= on a given port number. This tells Tornado which 
classes to use to handle which requests.
#+begin_src python
if __name__ == '__main__':
app = make_app()
app.listen(8080)
tornado.ioloop.IOLoop.instance().start()
#+end_src
