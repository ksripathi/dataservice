#+TITLE:     get-service.org
#+AUTHOR:    dataservices team
#+EMAIL:     madhavi@vlabs.ac.in
#+DATE:      2014-11-26 Wed

#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc

#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+PROPERTY: session *scratch*
#+PROPERTY: results output
#+PROPERTY: tangle api.py
#+PROPERTY: exports code


At the top of the program, we import various Tornado libraries. There are other helpful
libraries included with Tornado, but you’ll need to import at least these four to get this
program running:
#+begin_src python
import tornado.httpserver
import tornado.ioloop
import tornado.options
import tornado.web
#+end_src
BSON is the binary encoding of JSON-like documents that MongoDB uses when storing documents in collections.
It adds support for data types like Date, binary and objectid that aren't supported in JSON.

#+begin_src python
from bson.objectid import ObjectId
#+end_src

* PUT method for /labs

The PUT method updates the =/labs= with the new lab's information. It
updates the existing lab identified by =lab_id= and according to new key
values.

#+begin_src python 
    def put(self, lab_id):
        lab = Lab.getLabById(lab_id)
        for field in self.request.arguments:
            lab[field] = self.get_body_argument(field)
        print 'updated lab ' + lab_id
        print lab.to_dict()
        lab.save()
        self.finish({'updated_lab': lab.to_client()})
#+end_src

This is a Tornado request handler class. When handling a request, Tornado instantiates
this class and calls the method corresponding to the HTTP method of the request. In
this example, we’ve defined only a get method, meaning that this handler will respond
only to HTTP GET requests. Here, we need to pass object id of a lab to see
the details of that lab.
#+begin_src python
class LabIdHandler(tornado.web.RequestHandler):
def get(self, unique_id):
coll = Lab._get_collection()
sub_coll = coll.find_one({"_id":ObjectId(unique_id)})
if sub_coll:
sub_coll["_id"] = str(sub_coll["_id"])
self.write(sub_coll)
else:
self.set_status(404)
self.write({"error": "word not found"})
#+end_src

In DisciplineHandler we need to pass discipline name such as =cse= then it will 
display all the labs corresponding to this particular discipline.

#+begin_src python
class DisciplineHandler(tornado.web.RequestHandler):
def get(self, disciplinename):
sub_coll = Lab.objects(discipline_name = disciplinename).to_json()
if sub_coll:
self.write(sub_coll)
else:
self.set_status(404)
self.write({"error": "word not found"})
#+end_src

Tornado uses the regular expression in the tuples to match the path of the HTTP re-
quest. (The path is the portion of the URL that follows the hostname, excluding the
query string and fragment.) Tornado treats these regular expressions as though they
contain beginning-of-line and end-of-line anchors (i.e., the string "/" is assumed to
mean "^/$").

When a regular expression has a capture group in it (i.e., a portion of the regular ex-
pression is enclosed in parentheses), the matching contents of that group will be passed
to the RequestHandler object as parameters to the method corresponding to the HTTP
request.

#+begin_src python
def make_app():
return tornado.web.Application([
tornado.web.url(r'/labs', LabHandler),
tornado.web.url(r'/labs/([0-9a-z]*)', LabIdHandler),
tornado.web.url(r'/labs/disciplines/([a-z]*)', DisciplineHandler),
])
#+end_src
These are the lines that actually make the Tornado application run.
Then we create an instance of Tornado’s Application class 
=make_app()= on a given port number. This tells Tornado which 
classes to use to handle which requests.
#+begin_src python
if __name__ == '__main__':
app = make_app()
app.listen(8080)
tornado.ioloop.IOLoop.instance().start()
#+end_src

* POST method for /labs

This method posts or creates an entry for a new lab in database. All
the information available regarding that lab is stored.  There are
certain important fields that can't be left empty since they help in
identifying a lab uniquely, thus if that field is not present in the
body of the http request, an error is displayed.

#+BEGIN_SRC python

 def post(self):
     err = None
     if not self.get_body_argument('lab_name'):
         err = 'Field lab_name cannot be empty'

     if not self.get_body_argument('institute_name'):
         err = 'Field institute_name cannot be empty'

     if not self.get_body_argument('discipline_name'):
         err = 'Field discipline_name cannot be empty'

     if not self.get_body_argument('repo_url'):
         err = 'Field repo_url cannot be empty'

     if err:
         self.set_status(400)
         self.finish({"error": err})

     args = {}
     for field in self.request.arguments:
         args[field] = self.get_body_argument(field)

     new_lab = Lab(**args)
     new_lab.save()
     self.finish(new_lab.to_client())
#+end_src
        

* Get information about any field in a specific lab

There may be times when we want to know the value of a particular
field in a lab for example the status of that lab or if that lab is
auto deployed or not.  Such information can be retrieved if we pass
the lab id of that lab along with the parameter name.
      
#+BEGIN_SRC python
class LabIdHandler(tornado.web.RequestHandler):
    def get(self, _id, param=None):
        # get the specific lab passed from ID passed in the URL
        lab = Lab.getLabById(_id)
        if lab:
            # if further param/field is present
            if param:
                try:
                    # filter by it
                    self.finish({param: lab[param]})
                except KeyError:
                    # else invalid field
                    self.finish({'error': 'Invalid field attribute'})

            else:
                self.finish(lab.to_client())
        else:
            self.set_status(404)
            self.finish({"error": "Lab not found"})

#+END_SRC

* GET method for /labs/search?key1=value1&key2=value2&key3=value3

In SearchHandler, you need to pass the query string after =?= to search according
to key value, such as =/labs/search?key1=value1&key2=value2&key3=value3= then it will 
display all information correspondinng to the search query.

#+begin_src python
class SearchHandler(tornado.web.RequestHandler):
    def get(self):
        search = {}
        for field in self.request.arguments:
            search[field] = self.get_query_argument(field)
            print search

            labs = Lab.objects(__raw__=search)
            if len(labs):
                self.finish({'labs': map(lambda x: x.to_client(), labs)})

            else:
                self.set_status(400)
                self.finish({'error': 'No lab found'})
#+end_src

